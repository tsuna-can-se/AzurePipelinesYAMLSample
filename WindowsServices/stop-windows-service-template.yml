parameters:
- name: windowsServiceName
  type: string
  default: ''
- name: timeoutSec
  type: number
  default: '40'

steps:
  - task: PowerShell@2
    displayName: 'パラメーターチェック'
    inputs:
      targetType: 'inline'
      script: |
        If ( "${{ parameters.windowsServiceName }}" -eq "" ) {
            Write-Host "##vso[task.logissue type=error;]テンプレートパラメーター \"windowsServiceName\" が指定されていません。"
            Write-Host "##vso[task.complete result=Failed;]"
            exit
        }
  - task: PowerShell@2
    displayName: '${{ parameters.windowsServiceName }} の停止'
    inputs:
      targetType: 'inline'
      script: |
        $SvcName = '${{ parameters.windowsServiceName }}'
        $Timeout = New-TimeSpan -Seconds ${{ parameters.timeoutSec }}
        $SvcCtrl = Get-Service | Where-Object { $_.Name -eq $SvcName }
        If ($SvcCtrl -eq $null) {
            Write-Host "##vso[task.logissue type=error;]"$SvcName" という名前の Windows サービスが見つかりません。"
            Write-Host "##vso[task.complete result=Failed;]"
            exit
        }

        Write-Host "サービス (" $SvcCtrl.Name "|" $SvcCtrl.DisplayName ") が見つかりました ( ステータス:" $SvcCtrl.Status ") 。"
        If ($SvcCtrl.Status -eq "StartPending") {
            Write-Host "サービス (" $SvcCtrl.Name "|" $SvcCtrl.DisplayName ") が開始処理中のため待機しています ( ステータス:" $SvcCtrl.Status ") 。"
            try {
                $SvcCtrl.WaitForStatus("Running", $Timeout)
            } catch {
                Write-Host "##vso[task.logissue type=warning;]"$SvcName" が開始するのを待機しましたが、タイムアウトしました。"
                Write-Host $_.Exception.ToString()
            }
            $SvcCtrl.Refresh()
        }

        If ($SvcCtrl.Status -eq "Running") {
            Write-Host "サービス (" $SvcCtrl.Name "|" $SvcCtrl.DisplayName ") の終了処理を実行します ( ステータス:" $SvcCtrl.Status ") 。"
            try {
                $SvcCtrl.Stop()
            } catch {
                Write-Host "##vso[task.logissue type=warning;]"$SvcName" の終了に失敗しました。"
                Write-Host $_.Exception.ToString()
            }
            $SvcCtrl.Refresh()
        }

        If ($SvcCtrl.Status -eq "StopPending") {
            Write-Host "サービス (" $SvcCtrl.Name "|" $SvcCtrl.DisplayName ") が終了処理中のため待機しています ( ステータス:" $SvcCtrl.Status ") 。"
            try {
                $SvcCtrl.WaitForStatus("Stopped", $Timeout)
            } catch {
                Write-Host "##vso[task.logissue type=warning;]"$SvcName" が終了するのを待機しましたが、タイムアウトしました。"
                Write-Host $_.Exception.ToString()
            }
            $SvcCtrl.Refresh()
        }

        If ($SvcCtrl.Status -eq "Stopped") {
            Write-Host "サービス (" $SvcCtrl.Name "|" $SvcCtrl.DisplayName ") が終了しました ( ステータス:" $SvcCtrl.Status ") 。"
            exit
        }
        Else {
            Write-Host "##vso[task.logissue type=error;]"$SvcName" が終了しませんでした。"
            Write-Host "サービス (" $SvcCtrl.Name "|" $SvcCtrl.DisplayName ") が終了しませんでした ( ステータス:" $SvcCtrl.Status ") 。"
            Write-Host "##vso[task.complete result=Failed;]"
            exit
        }